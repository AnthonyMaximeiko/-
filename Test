Кейсы по SQL:
Задание 1:

WITH Packages AS (
  SELECT
    OrderNumber,
    Moment,
    PackageName,
    ROW_NUMBER() OVER (PARTITION BY OrderNumber ORDER BY Moment DESC) AS RowNum
  FROM
    MyTable
)
SELECT
  OrderNumber,
  Moment AS ChosenMoment,
  PackageName
FROM
  RankedPackages
WHERE
  RowNum = 1


  Задание 2:

WITH Carriages AS (
  SELECT
    CarriageID,
    SUM(Volume) AS TotalVolume,
    ROW_NUMBER() OVER (ORDER BY SUM(Volume) DESC) AS RowNum
  FROM
    MyTable
  WHERE
    CAST(MomentOut AS DATETIME) >= DATEADD(MONTH, -1, GETDATE())
  GROUP BY
    CarriageID
)
SELECT TOP 10 PERCENT
  C.CarriageID,
  C.TotalVolume
FROM
  Carriages AS C
WHERE
  C.RowNum <= 10
ORDER BY
  C.TotalVolume DESC

Кейсы по Python:
1. Откройте файл с таблицей Выведите последние 10 строк.
Посмотрите на данные и скажите, что они из себя представляют, сколько в таблице строк, какие столбцы?

import pandas as pd

# Чтение файла data.csv
df = pd.read_csv('data.csv')

# Вывод последних 10 строк
print(df.tail(10))

# Информация о таблице
print("\nИнформация о таблице:")
print(df.info())

2. Сколько заказов попало в выборку? Сколько уникальных категорий товара было куплено? (item_name)

import pandas as pd

# Чтение файла data.csv
df = pd.read_csv('data.csv')

# Подсчет количества заказов
количество_заказов = df['order_id'].nunique()

# Подсчет количества уникальных категорий товара
количество_уникальных_товаров = df['item_name'].nunique()

# Вывод результатов
print(f"Количество заказов: {количество_заказов}")
print(f"Количество уникальных категорий товара: {количество_уникальных_товаров}")

3.Есть ли в данных пропуски? В каких колонках?
Заполните пропуски пустой строкой для строковых колонок и нулём для числовых.

import pandas as pd

# Чтение файла data.csv
df = pd.read_csv('data.csv')

# Проверка наличия пропусков в данных
пропуски = df.isnull().sum()

# Вывод информации о пропусках
print("Пропуски в данных:")
print(пропуски)

# Заполнение пропусков пустой строкой для строковых колонок и нулём для числовых
df = df.fillna({'quantity': 0, 'item_name': '', 'choice_description': '', 'item_price': 0})

# Проверка, что пропуски были успешно заполнены
пропуски_после_заполнения = df.isnull().sum()
print("\nПропуски после заполнения:")
print(пропуски_после_заполнения)

4. Какая средняя/минимальная/максимальная цена у товара?

import pandas as pd

# Чтение файла data.csv
df = pd.read_csv('data.csv')

# Преобразование столбца 'item_price' в числовой формат
df['item_price'] = df['item_price'].str.replace('$', '').astype(float)

# Вычисление средней, минимальной и максимальной цен
средняя_цена = df['item_price'].mean()
минимальная_цена = df['item_price'].min()
максимальная_цена = df['item_price'].max()

# Вывод результатов
print(f"Средняя цена товара: ${средняя_цена:.2f}")
print(f"Минимальная цена товара: ${минимальная_цена:.2f}")
print(f"Максимальная цена товара: ${максимальная_цена:.2f}")

5. Выведите 5% наиболее дорогих заказов. В ответе должны фигурировать следующие столбцы: quantity, item_name, item_price

import pandas as pd

# Чтение файла data.csv
df = pd.read_csv('data.csv')

# Преобразование столбца 'item_price' в числовой формат
df['item_price'] = df['item_price'].str.replace('$', '').astype(float)

# Сортировка данных по убыванию цены и выбор 5% наиболее дорогих заказов
наиболее_дорогие_заказы = df.nlargest(int(len(df) * 0.05), 'item_price')

# Вывод необходимых столбцов
результат = наиболее_дорогие_заказы[['quantity', 'item_name', 'item_price']]

# Вывод результатов
print(результат)

6. Посчитайте кол-во заказов, где сумма чека больше 20$. Какой это процент от общего числа заказов?

import pandas as pd

# Чтение файла data.csv
df = pd.read_csv('data.csv')

# Преобразование столбца 'item_price' в числовой формат
df['item_price'] = df['item_price'].str.replace('$', '').astype(float)

# Группировка данных по номеру заказа и суммирование цен для каждого заказа
сумма_чека = df.groupby('order_id')['item_price'].sum()

# Подсчет количества заказов с суммой чека больше 20$
количество_заказов_больше_20 = сумма_чека[сумма_чека > 20].count()

# Общее количество заказов
общее_количество_заказов = df['order_id'].nunique()

# Расчет процента заказов с суммой чека больше 20
процент_заказов_больше_20 = (количество_заказов_больше_20 / общее_количество_заказов) * 100

# Вывод результатов
print(f"Количество заказов с суммой чека больше 20$: {количество_заказов_больше_20}")
print(f"Процент от общего числа заказов: {процент_заказов_больше_20:.2f}%")

7. Разбейте заказы на три группы: дешевые, средние и дорогие.
Порог для групп подберите сами (посмотрите, на около какой суммы чаще берут в каждой группе).


Для разбиения заказов на три группы (дешевые, средние и дорогие),
можно рассмотреть распределение сумм чеков и определить пороги для каждой группы.
Для этого используем инструменты для визуального анализа:

import pandas as pd
import matplotlib.pyplot as plt

# Чтение файла data.csv
df = pd.read_csv('data.csv')

# Преобразование столбца 'item_price' в числовой формат
df['item_price'] = df['item_price'].str.replace('$', '').astype(float)

# Группировка данных по номеру заказа и суммирование цен для каждого заказа
сумма_чека = df.groupby('order_id')['item_price'].sum()

# Визуализация распределения сумм чеков
plt.hist(сумма_чека, bins=50, edgecolor='black')
plt.title('Распределение сумм чеков')
plt.xlabel('Сумма чека')
plt.ylabel('Количество заказов')
plt.show()

После построения графиков можно оценить, где находятся наиболее частые суммы чеков и решить, как разделить заказы на три группы.
Затем, используя выбранные значения, можно создать новый столбец для указания каждого заказа в соответствующей группе

# Определение порогов для групп
порог_дешевых = 10
порог_средних = 20

# Создание нового столбца 'группа' на основе суммы чека
df['группа'] = pd.cut(df.groupby('order_id')['item_price'].transform('sum'),
                      bins=[-float('inf'), порог_дешевых, порог_средних, float('inf')],
                      labels=['дешевые', 'средние', 'дорогие'])

# Вывод результатов
print(df[['order_id', 'группа']].drop_duplicates())
